{"id":422,"assetBundleId":-1,"data":[[],"TextMeshPro\/Distance Field",null,["BEVEL_ON","GLOW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","__"],[[0,0,"",0,"",0,[0,"unity_GUIZTestMode"],[0,null],[0,"_CullMode"],[[1,null],[10,null],[0,null]],[[1,null],[10,null],[0,null]],[0,"_ColorMask"],[0,null],[0,null],[0,"_Stencil"],[0,"_StencilReadMask"],[0,"_StencilWriteMask"],[[0,"_StencilOp"],[0,null],[0,null],[0,"_StencilComp"]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["IGNOREPROJECTOR","true"],["QUEUE","Transparent"],["RenderType","Transparent"]],["BEVEL_ON","GLOW_ON","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNDERLAY_INNER","UNDERLAY_ON","UNITY_SINGLE_PASS_STEREO","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT","__"],[[["__","BEVEL_ON"],1],[["__","UNDERLAY_ON","UNDERLAY_INNER"],1],[["__","GLOW_ON"],1],[["__","UNITY_UI_CLIP_RECT"],1],[["__","UNITY_UI_ALPHACLIP"],1]],[[0,0,[],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","UNDERLAY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x \/ u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp float u_xlat10_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nfloat u_xlat8;\nfloat u_xlat9;\nvec2 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat18;\nlowp vec2 u_xlat10_19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nlowp float u_xlat10_27;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat1.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat10.x = _ShaderFlags * 0.5;\n    u_xlatb19 = u_xlat10.x>=(-u_xlat10.x);\n    u_xlat10.x = fract(abs(u_xlat10.x));\n    u_xlat10.x = (u_xlatb19) ? u_xlat10.x : (-u_xlat10.x);\n    u_xlatb10 = u_xlat10.x>=0.5;\n    u_xlat0 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat10.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat10.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat27 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.x = u_xlat27 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat27) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_19.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat10_2 = texture2D(_FaceTex, u_xlat1.xy);\n    u_xlat16_4.xy = u_xlat10_19.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_31);\n    u_xlat27 = (-_BumpFace) + _BumpOutline;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1.x = (-u_xlat10_1) + vs_TEXCOORD1.z;\n    u_xlat1.z = _OutlineWidth * _ScaleRatioA;\n    u_xlat10.xy = u_xlat1.xz * vs_TEXCOORD1.yy;\n    u_xlat10.x = u_xlat10.y * 0.5 + u_xlat10.x;\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat27 = u_xlat10.x * u_xlat27 + _BumpFace;\n    u_xlat0.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat27) + u_xlat0.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat27 = u_xlat27 + u_xlat27;\n    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat27) + vs_TEXCOORD3.xyz;\n    u_xlat10_3.xyz = textureCube(_Cube, u_xlat3.xyz).xyz;\n    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat5.xyz = u_xlat10.xxx * u_xlat5.xyz + _ReflectFaceColor.xyz;\n    u_xlat3.xyz = u_xlat10_3.xyz * u_xlat5.xyz;\n    u_xlat16_4.x = min(u_xlat10.y, 1.0);\n    u_xlat16_13 = u_xlat10.y * 0.5;\n    u_xlat16_4.x = sqrt(u_xlat16_4.x);\n    u_xlat16_22 = u_xlat1.x * vs_TEXCOORD1.y + u_xlat16_13;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_13 = u_xlat1.x * vs_TEXCOORD1.y + (-u_xlat16_13);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat16_6.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * u_xlat16_6.xyz;\n    u_xlat27 = u_xlat10_2.w * _FaceColor.w;\n    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_5 = texture2D(_OutlineTex, u_xlat2.xy);\n    u_xlat7 = u_xlat10_5 * _OutlineColor;\n    u_xlat16_5.w = _OutlineColor.w * u_xlat10_5.w + (-u_xlat27);\n    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat7.www + (-u_xlat16_6.xyz);\n    u_xlat16_5 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat16_5.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_2.w + u_xlat16_5.w;\n    u_xlat27 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat27 * vs_TEXCOORD1.y;\n    u_xlat16_4.x = u_xlat27 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_13 = u_xlat2.x * 0.5 + u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_13 \/ u_xlat16_4.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_2 = u_xlat16_1 * u_xlat16_4.xxxx;\n    u_xlat16_4.x = (-u_xlat16_1.w) * u_xlat16_4.x + 1.0;\n    u_xlat3.xyz = u_xlat16_2.www * u_xlat3.xyz;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat8 = cos(_LightAngle);\n    u_xlat7.y = u_xlat8;\n    u_xlat7.z = -1.0;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat9 = u_xlat0.z * u_xlat0.z;\n    u_xlat18 = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat18 = log2(u_xlat18);\n    u_xlat18 = u_xlat18 * _Reflectivity;\n    u_xlat18 = exp2(u_xlat18);\n    u_xlat7.xyz = vec3(u_xlat18) * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_2.www + u_xlat16_2.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat30 = (-_Ambient) + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat30 + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat9) + u_xlat3.xyz;\n    u_xlat10_27 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat27 = u_xlat10_27 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vec4(u_xlat27) * vs_COLOR1;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xyz;\n    u_xlat0.w = u_xlat1.w * u_xlat16_4.x + u_xlat16_2.w;\n    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["GLOW_ON","UNDERLAY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp float u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nbool u_xlatb6;\nmediump float u_xlat16_7;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_7 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0) + vs_TEXCOORD1.z;\n    u_xlat16_13 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_7;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_7 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_7);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_13;\n    u_xlat6.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat6.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat6.xy);\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat0.y = _OutlineSoftness * _ScaleRatioA;\n    u_xlat0.xz = u_xlat0.xy * vs_TEXCOORD1.yy;\n    u_xlat16_1 = u_xlat0.y * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_7 = u_xlat0.z * 0.5 + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_7 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_6 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat2 = u_xlat6.xxxx * vs_COLOR1;\n    u_xlat1 = u_xlat2 * vec4(u_xlat16_1) + u_xlat16_3;\n    u_xlat6.x = _GlowOffset * _ScaleRatioB;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat0.x = (-u_xlat6.x) * 0.5 + u_xlat0.x;\n    u_xlatb6 = u_xlat0.x>=0.0;\n    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat12 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat6.x = u_xlat6.x * u_xlat12 + _GlowInner;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat12 = u_xlat6.x * 0.5 + 1.0;\n    u_xlat6.x = u_xlat6.x * 0.5;\n    u_xlat6.x = min(u_xlat6.x, 1.0);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat0.x = u_xlat0.x \/ u_xlat12;\n    u_xlat0.x = min(abs(u_xlat0.x), 1.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _GlowPower;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1.xyz = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;\n    SV_Target0 = u_xlat1 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","GLOW_ON","UNDERLAY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec4 u_xlat16_6;\nvec4 u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_12;\nfloat u_xlat16;\nlowp vec2 u_xlat10_17;\nbool u_xlatb17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat1.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_17.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat10_2 = texture2D(_FaceTex, u_xlat1.xy);\n    u_xlat16_4.xy = u_xlat10_17.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat24 = (-_BumpFace) + _BumpOutline;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1.x = (-u_xlat10_1) + vs_TEXCOORD1.z;\n    u_xlat1.z = _OutlineWidth * _ScaleRatioA;\n    u_xlat9.xy = u_xlat1.xz * vs_TEXCOORD1.yy;\n    u_xlat25 = u_xlat9.y * 0.5 + u_xlat9.x;\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat24 = u_xlat25 * u_xlat24 + _BumpFace;\n    u_xlat0.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat24) + u_xlat0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat24 = u_xlat24 + u_xlat24;\n    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat24) + vs_TEXCOORD3.xyz;\n    u_xlat10_3.xyz = textureCube(_Cube, u_xlat3.xyz).xyz;\n    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + _ReflectFaceColor.xyz;\n    u_xlat3.xyz = u_xlat10_3.xyz * u_xlat5.xyz;\n    u_xlat16_4.x = min(u_xlat9.y, 1.0);\n    u_xlat16_12 = u_xlat9.y * 0.5;\n    u_xlat16_4.x = sqrt(u_xlat16_4.x);\n    u_xlat16_20 = u_xlat1.x * vs_TEXCOORD1.y + u_xlat16_12;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_12 = u_xlat1.x * vs_TEXCOORD1.y + (-u_xlat16_12);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_20;\n    u_xlat16_6.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat1.xzw = u_xlat10_2.xyz * u_xlat16_6.xyz;\n    u_xlat24 = u_xlat10_2.w * _FaceColor.w;\n    u_xlat16_6.xyz = vec3(u_xlat24) * u_xlat1.xzw;\n    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_5 = texture2D(_OutlineTex, u_xlat2.xy);\n    u_xlat7 = u_xlat10_5 * _OutlineColor;\n    u_xlat16_5.w = _OutlineColor.w * u_xlat10_5.w + (-u_xlat24);\n    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat7.www + (-u_xlat16_6.xyz);\n    u_xlat16_5 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat24) + u_xlat16_5.xyz;\n    u_xlat16_6.w = _FaceColor.w * u_xlat10_2.w + u_xlat16_5.w;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat1.x = u_xlat24 * vs_TEXCOORD1.y;\n    u_xlat16_4.x = u_xlat24 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_12 = u_xlat1.x * 0.5 + u_xlat16_12;\n    u_xlat16_4.x = u_xlat16_12 \/ u_xlat16_4.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_6;\n    u_xlat16_4.x = (-u_xlat16_6.w) * u_xlat16_4.x + 1.0;\n    u_xlat1.xzw = u_xlat16_2.www * u_xlat3.xyz;\n    u_xlat3.x = sin(_LightAngle);\n    u_xlat7.x = cos(_LightAngle);\n    u_xlat3.y = u_xlat7.x;\n    u_xlat3.z = -1.0;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat8 = u_xlat0.z * u_xlat0.z;\n    u_xlat16 = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat16 = log2(u_xlat16);\n    u_xlat16 = u_xlat16 * _Reflectivity;\n    u_xlat16 = exp2(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * _SpecularColor.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_2.www + u_xlat16_2.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat3.x = (-_Ambient) + 1.0;\n    u_xlat8 = u_xlat8 * u_xlat3.x + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat1.xzw;\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat24 = u_xlat10_24 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat3 = vec4(u_xlat24) * vs_COLOR1;\n    u_xlat0.xyz = u_xlat3.xyz * u_xlat16_4.xxx + u_xlat0.xyz;\n    u_xlat2.w = u_xlat3.w * u_xlat16_4.x + u_xlat16_2.w;\n    u_xlat24 = _GlowOffset * _ScaleRatioB;\n    u_xlat24 = u_xlat24 * vs_TEXCOORD1.y;\n    u_xlat24 = (-u_xlat24) * 0.5 + u_xlat9.x;\n    u_xlatb1 = u_xlat24>=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat9.x = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat1.x = u_xlat1.x * u_xlat9.x + _GlowInner;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD1.y;\n    u_xlat9.x = u_xlat1.x * 0.5 + 1.0;\n    u_xlat1.x = u_xlat1.x * 0.5;\n    u_xlat1.x = min(u_xlat1.x, 1.0);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat24 = u_xlat24 \/ u_xlat9.x;\n    u_xlat24 = min(abs(u_xlat24), 1.0);\n    u_xlat24 = log2(u_xlat24);\n    u_xlat24 = u_xlat24 * _GlowPower;\n    u_xlat24 = exp2(u_xlat24);\n    u_xlat24 = (-u_xlat24) + 1.0;\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat24 = dot(_GlowColor.ww, vec2(u_xlat24));\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xyz = _GlowColor.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n    SV_Target0 = u_xlat2 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x \/ u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nlowp vec2 u_xlat10_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nvec2 u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nbool u_xlatb27;\nfloat u_xlat32;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_10 = u_xlat0.x * 0.5;\n    u_xlat10_9.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat9.x = (-u_xlat10_9.x) + vs_TEXCOORD1.z;\n    u_xlat16_19 = u_xlat9.x * vs_TEXCOORD1.y + u_xlat16_10;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = u_xlat9.x * vs_TEXCOORD1.y + (-u_xlat16_10);\n    u_xlat9.x = u_xlat9.x * vs_TEXCOORD1.y;\n    u_xlat0.x = u_xlat0.x * 0.5 + u_xlat9.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_19;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat9.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat9.xy);\n    u_xlat10_9.xy = texture2D(_BumpMap, u_xlat9.xy).yw;\n    u_xlat16_6.xy = u_xlat10_9.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat9.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat9.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat9.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat18.x = u_xlat9.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat9.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_10 = u_xlat18.x * 0.5 + u_xlat16_10;\n    u_xlat16_1 = u_xlat16_10 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_9.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat9.x = u_xlat10_9.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat2 = u_xlat9.xxxx * vs_COLOR1;\n    u_xlat4.w = u_xlat2.w * u_xlat16_1 + u_xlat16_3.w;\n    u_xlat16_10 = u_xlat4.w + -0.00100000005;\n    u_xlatb9 = u_xlat16_10<0.0;\n    if(u_xlatb9){discard;}\n    u_xlat9.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat5.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat5.z = 0.0;\n    u_xlat7 = (-u_xlat5.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat5 = u_xlat5.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_8.x = texture2D(_MainTex, u_xlat7.xy).w;\n    u_xlat10_8.z = texture2D(_MainTex, u_xlat7.zw).w;\n    u_xlat10_8.y = texture2D(_MainTex, u_xlat5.xy).w;\n    u_xlat10_8.w = texture2D(_MainTex, u_xlat5.zw).w;\n    u_xlat5 = u_xlat9.xxxx + u_xlat10_8;\n    u_xlat5 = u_xlat5 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat9.x = _BevelWidth + _OutlineWidth;\n    u_xlat9.x = max(u_xlat9.x, 0.00999999978);\n    u_xlat5 = u_xlat5 \/ u_xlat9.xxxx;\n    u_xlat9.x = u_xlat9.x * _Bevel;\n    u_xlat9.x = u_xlat9.x * _GradientScale;\n    u_xlat9.x = u_xlat9.x * -2.0;\n    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat7 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat7 = -abs(u_xlat7) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat18.x = _ShaderFlags * 0.5;\n    u_xlatb27 = u_xlat18.x>=(-u_xlat18.x);\n    u_xlat18.x = fract(abs(u_xlat18.x));\n    u_xlat18.x = (u_xlatb27) ? u_xlat18.x : (-u_xlat18.x);\n    u_xlatb18 = u_xlat18.x>=0.5;\n    u_xlat5 = (bool(u_xlatb18)) ? u_xlat7 : u_xlat5;\n    u_xlat7 = u_xlat5 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat7 = sin(u_xlat7);\n    u_xlat7 = (-u_xlat5) + u_xlat7;\n    u_xlat5 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat7 + u_xlat5;\n    u_xlat18.x = (-_BevelClamp) + 1.0;\n    u_xlat5 = min(u_xlat18.xxxx, u_xlat5);\n    u_xlat18.xy = u_xlat9.xx * u_xlat5.xz;\n    u_xlat5.yz = u_xlat5.wy * u_xlat9.xx + (-u_xlat18.yx);\n    u_xlat5.x = float(-1.0);\n    u_xlat5.w = float(1.0);\n    u_xlat9.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat18.x = dot(u_xlat5.zw, u_xlat5.zw);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat7.x = u_xlat18.x * u_xlat5.z;\n    u_xlat7.yz = u_xlat18.xx * vec2(1.0, 0.0);\n    u_xlat5.z = 0.0;\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat9.xyz * u_xlat7.xyz;\n    u_xlat9.xyz = u_xlat7.zxy * u_xlat9.yzx + (-u_xlat5.xyz);\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat0.x * u_xlat5.x + _BumpFace;\n    u_xlat16_10 = dot(u_xlat16_6.xy, u_xlat16_6.xy);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + 1.0;\n    u_xlat16_6.z = sqrt(u_xlat16_10);\n    u_xlat9.xyz = (-u_xlat16_6.xyz) * u_xlat5.xxx + u_xlat9.xyz;\n    u_xlat5.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat9.xyz = u_xlat9.xyz * u_xlat5.xxx;\n    u_xlat5.x = dot(vs_TEXCOORD3.xyz, (-u_xlat9.xyz));\n    u_xlat5.x = u_xlat5.x + u_xlat5.x;\n    u_xlat5.xyz = u_xlat9.xyz * u_xlat5.xxx + vs_TEXCOORD3.xyz;\n    u_xlat10_5.xyz = textureCube(_Cube, u_xlat5.xyz).xyz;\n    u_xlat7.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + _ReflectFaceColor.xyz;\n    u_xlat5.xyz = u_xlat10_5.xyz * u_xlat7.xyz;\n    u_xlat5.xyz = u_xlat16_3.www * u_xlat5.xyz;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat0.x = cos(_LightAngle);\n    u_xlat7.y = u_xlat0.x;\n    u_xlat7.z = -1.0;\n    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat7.xyz);\n    u_xlat9.x = u_xlat9.z * u_xlat9.z;\n    u_xlat18.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat18.x = log2(u_xlat18.x);\n    u_xlat18.x = u_xlat18.x * _Reflectivity;\n    u_xlat18.x = exp2(u_xlat18.x);\n    u_xlat7.xyz = u_xlat18.xxx * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_3.www + u_xlat16_3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat32 = (-_Ambient) + 1.0;\n    u_xlat9.x = u_xlat9.x * u_xlat32 + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * u_xlat9.xxx + u_xlat5.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * vec3(u_xlat16_1) + u_xlat0.xyz;\n    SV_Target0 = u_xlat4 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["GLOW_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp float u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nbool u_xlatb6;\nmediump float u_xlat16_7;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_7 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0) + vs_TEXCOORD1.z;\n    u_xlat16_13 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_7;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_7 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_7);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_13;\n    u_xlat6.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat6.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat6.xy);\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat0.y = _OutlineSoftness * _ScaleRatioA;\n    u_xlat0.xz = u_xlat0.xy * vs_TEXCOORD1.yy;\n    u_xlat16_1 = u_xlat0.y * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_7 = u_xlat0.z * 0.5 + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_7 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_6 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat2 = u_xlat6.xxxx * vs_COLOR1;\n    u_xlat1 = u_xlat2 * vec4(u_xlat16_1) + u_xlat16_3;\n    u_xlat16_4.x = u_xlat1.w + -0.00100000005;\n    u_xlatb6 = u_xlat16_4.x<0.0;\n    if(u_xlatb6){discard;}\n    u_xlat6.x = _GlowOffset * _ScaleRatioB;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat0.x = (-u_xlat6.x) * 0.5 + u_xlat0.x;\n    u_xlatb6 = u_xlat0.x>=0.0;\n    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat12 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat6.x = u_xlat6.x * u_xlat12 + _GlowInner;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat12 = u_xlat6.x * 0.5 + 1.0;\n    u_xlat6.x = u_xlat6.x * 0.5;\n    u_xlat6.x = min(u_xlat6.x, 1.0);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat0.x = u_xlat0.x \/ u_xlat12;\n    u_xlat0.x = min(abs(u_xlat0.x), 1.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _GlowPower;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1.xyz = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;\n    SV_Target0 = u_xlat1 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","GLOW_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nlowp vec3 u_xlat10_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nlowp float u_xlat10_9;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nvec2 u_xlat18;\nlowp vec2 u_xlat10_18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nfloat u_xlat23;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat32;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_10 = u_xlat0.x * 0.5;\n    u_xlat10_9 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat9 = (-u_xlat10_9) + vs_TEXCOORD1.z;\n    u_xlat16_19 = u_xlat9 * vs_TEXCOORD1.y + u_xlat16_10;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = u_xlat9 * vs_TEXCOORD1.y + (-u_xlat16_10);\n    u_xlat9 = u_xlat9 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_19;\n    u_xlat18.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat18.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat18.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat18.xy);\n    u_xlat10_18.xy = texture2D(_BumpMap, u_xlat18.xy).yw;\n    u_xlat16_6.xy = u_xlat10_18.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat18.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat18.xxx * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat18.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat18.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat18.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat27 = u_xlat18.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat18.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_10 = u_xlat27 * 0.5 + u_xlat16_10;\n    u_xlat16_1 = u_xlat16_10 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_18.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat18.x = u_xlat10_18.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);\n    u_xlat2 = u_xlat18.xxxx * vs_COLOR1;\n    u_xlat4.w = u_xlat2.w * u_xlat16_1 + u_xlat16_3.w;\n    u_xlat16_10 = u_xlat4.w + -0.00100000005;\n    u_xlatb18 = u_xlat16_10<0.0;\n    if(u_xlatb18){discard;}\n    u_xlat18.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat5.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat5.z = 0.0;\n    u_xlat7 = (-u_xlat5.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat5 = u_xlat5.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_8.x = texture2D(_MainTex, u_xlat7.xy).w;\n    u_xlat10_8.z = texture2D(_MainTex, u_xlat7.zw).w;\n    u_xlat10_8.y = texture2D(_MainTex, u_xlat5.xy).w;\n    u_xlat10_8.w = texture2D(_MainTex, u_xlat5.zw).w;\n    u_xlat5 = u_xlat18.xxxx + u_xlat10_8;\n    u_xlat5 = u_xlat5 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat18.x = _BevelWidth + _OutlineWidth;\n    u_xlat18.x = max(u_xlat18.x, 0.00999999978);\n    u_xlat5 = u_xlat5 \/ u_xlat18.xxxx;\n    u_xlat18.x = u_xlat18.x * _Bevel;\n    u_xlat18.x = u_xlat18.x * _GradientScale;\n    u_xlat18.x = u_xlat18.x * -2.0;\n    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat7 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat7 = -abs(u_xlat7) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat27 = _ShaderFlags * 0.5;\n    u_xlatb8 = u_xlat27>=(-u_xlat27);\n    u_xlat27 = fract(abs(u_xlat27));\n    u_xlat27 = (u_xlatb8) ? u_xlat27 : (-u_xlat27);\n    u_xlatb27 = u_xlat27>=0.5;\n    u_xlat5 = (bool(u_xlatb27)) ? u_xlat7 : u_xlat5;\n    u_xlat7 = u_xlat5 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat7 = sin(u_xlat7);\n    u_xlat7 = (-u_xlat5) + u_xlat7;\n    u_xlat5 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat7 + u_xlat5;\n    u_xlat27 = (-_BevelClamp) + 1.0;\n    u_xlat5 = min(vec4(u_xlat27), u_xlat5);\n    u_xlat5.xz = u_xlat18.xx * u_xlat5.xz;\n    u_xlat5.yz = u_xlat5.wy * u_xlat18.xx + (-u_xlat5.zx);\n    u_xlat5.x = float(-1.0);\n    u_xlat5.w = float(1.0);\n    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat27 = dot(u_xlat5.zw, u_xlat5.zw);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.x = u_xlat27 * u_xlat5.z;\n    u_xlat7.yz = vec2(u_xlat27) * vec2(1.0, 0.0);\n    u_xlat5.z = 0.0;\n    u_xlat5.xyz = u_xlat18.xxx * u_xlat5.xyz;\n    u_xlat8.xyz = u_xlat5.xyz * u_xlat7.xyz;\n    u_xlat5.xyz = u_xlat7.zxy * u_xlat5.yzx + (-u_xlat8.xyz);\n    u_xlat0.x = u_xlat0.x * 0.5 + u_xlat9;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat18.x = (-_BumpFace) + _BumpOutline;\n    u_xlat18.x = u_xlat0.x * u_xlat18.x + _BumpFace;\n    u_xlat16_10 = dot(u_xlat16_6.xy, u_xlat16_6.xy);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + 1.0;\n    u_xlat16_6.z = sqrt(u_xlat16_10);\n    u_xlat5.xyz = (-u_xlat16_6.xyz) * u_xlat18.xxx + u_xlat5.xyz;\n    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat5.xyz = u_xlat18.xxx * u_xlat5.xyz;\n    u_xlat18.x = dot(vs_TEXCOORD3.xyz, (-u_xlat5.xyz));\n    u_xlat18.x = u_xlat18.x + u_xlat18.x;\n    u_xlat7.xyz = u_xlat5.xyz * u_xlat18.xxx + vs_TEXCOORD3.xyz;\n    u_xlat10_7.xyz = textureCube(_Cube, u_xlat7.xyz).xyz;\n    u_xlat8.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat8.xyz + _ReflectFaceColor.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat10_7.xyz;\n    u_xlat0.xzw = u_xlat16_3.www * u_xlat0.xzw;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat8.x = cos(_LightAngle);\n    u_xlat7.y = u_xlat8.x;\n    u_xlat7.z = -1.0;\n    u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat32 = inversesqrt(u_xlat32);\n    u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat7.xyz);\n    u_xlat14 = u_xlat5.z * u_xlat5.z;\n    u_xlat23 = max(u_xlat5.x, 0.0);\n    u_xlat5.x = (-u_xlat5.x) * _Diffuse + 1.0;\n    u_xlat23 = log2(u_xlat23);\n    u_xlat23 = u_xlat23 * _Reflectivity;\n    u_xlat23 = exp2(u_xlat23);\n    u_xlat7.xyz = vec3(u_xlat23) * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_3.www + u_xlat16_3.xyz;\n    u_xlat5.xzw = u_xlat5.xxx * u_xlat7.xyz;\n    u_xlat7.x = (-_Ambient) + 1.0;\n    u_xlat14 = u_xlat14 * u_xlat7.x + _Ambient;\n    u_xlat0.xzw = u_xlat5.xzw * vec3(u_xlat14) + u_xlat0.xzw;\n    u_xlat0.xzw = u_xlat2.xyz * vec3(u_xlat16_1) + u_xlat0.xzw;\n    u_xlat5.x = _GlowOffset * _ScaleRatioB;\n    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y;\n    u_xlat9 = (-u_xlat5.x) * 0.5 + u_xlat9;\n    u_xlatb5 = u_xlat9>=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat14 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat5.x = u_xlat5.x * u_xlat14 + _GlowInner;\n    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y;\n    u_xlat14 = u_xlat5.x * 0.5 + 1.0;\n    u_xlat5.x = u_xlat5.x * 0.5;\n    u_xlat5.x = min(u_xlat5.x, 1.0);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat9 = u_xlat9 \/ u_xlat14;\n    u_xlat9 = min(abs(u_xlat9), 1.0);\n    u_xlat9 = log2(u_xlat9);\n    u_xlat9 = u_xlat9 * _GlowPower;\n    u_xlat9 = exp2(u_xlat9);\n    u_xlat9 = (-u_xlat9) + 1.0;\n    u_xlat9 = u_xlat5.x * u_xlat9;\n    u_xlat9 = dot(_GlowColor.ww, vec2(u_xlat9));\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat4.xyz = _GlowColor.xyz * vec3(u_xlat9) + u_xlat0.xzw;\n    SV_Target0 = u_xlat4 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","UNDERLAY_ON","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x \/ u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp float u_xlat10_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nfloat u_xlat8;\nfloat u_xlat9;\nvec2 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat18;\nlowp vec2 u_xlat10_19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nlowp float u_xlat10_27;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat1.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat10.x = _ShaderFlags * 0.5;\n    u_xlatb19 = u_xlat10.x>=(-u_xlat10.x);\n    u_xlat10.x = fract(abs(u_xlat10.x));\n    u_xlat10.x = (u_xlatb19) ? u_xlat10.x : (-u_xlat10.x);\n    u_xlatb10 = u_xlat10.x>=0.5;\n    u_xlat0 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat10.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat10.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat27 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.x = u_xlat27 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat27) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_19.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat10_2 = texture2D(_FaceTex, u_xlat1.xy);\n    u_xlat16_4.xy = u_xlat10_19.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_31);\n    u_xlat27 = (-_BumpFace) + _BumpOutline;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1.x = (-u_xlat10_1) + vs_TEXCOORD1.z;\n    u_xlat1.z = _OutlineWidth * _ScaleRatioA;\n    u_xlat10.xy = u_xlat1.xz * vs_TEXCOORD1.yy;\n    u_xlat10.x = u_xlat10.y * 0.5 + u_xlat10.x;\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat27 = u_xlat10.x * u_xlat27 + _BumpFace;\n    u_xlat0.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat27) + u_xlat0.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat27 = u_xlat27 + u_xlat27;\n    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat27) + vs_TEXCOORD3.xyz;\n    u_xlat10_3.xyz = textureCube(_Cube, u_xlat3.xyz).xyz;\n    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat5.xyz = u_xlat10.xxx * u_xlat5.xyz + _ReflectFaceColor.xyz;\n    u_xlat3.xyz = u_xlat10_3.xyz * u_xlat5.xyz;\n    u_xlat16_4.x = min(u_xlat10.y, 1.0);\n    u_xlat16_13 = u_xlat10.y * 0.5;\n    u_xlat16_4.x = sqrt(u_xlat16_4.x);\n    u_xlat16_22 = u_xlat1.x * vs_TEXCOORD1.y + u_xlat16_13;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_13 = u_xlat1.x * vs_TEXCOORD1.y + (-u_xlat16_13);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat16_6.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * u_xlat16_6.xyz;\n    u_xlat27 = u_xlat10_2.w * _FaceColor.w;\n    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_5 = texture2D(_OutlineTex, u_xlat2.xy);\n    u_xlat7 = u_xlat10_5 * _OutlineColor;\n    u_xlat16_5.w = _OutlineColor.w * u_xlat10_5.w + (-u_xlat27);\n    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat7.www + (-u_xlat16_6.xyz);\n    u_xlat16_5 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat16_1.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat16_5.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_2.w + u_xlat16_5.w;\n    u_xlat27 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat2.x = u_xlat27 * vs_TEXCOORD1.y;\n    u_xlat16_4.x = u_xlat27 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_13 = u_xlat2.x * 0.5 + u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_13 \/ u_xlat16_4.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_2 = u_xlat16_1 * u_xlat16_4.xxxx;\n    u_xlat16_4.x = (-u_xlat16_1.w) * u_xlat16_4.x + 1.0;\n    u_xlat3.xyz = u_xlat16_2.www * u_xlat3.xyz;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat8 = cos(_LightAngle);\n    u_xlat7.y = u_xlat8;\n    u_xlat7.z = -1.0;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat9 = u_xlat0.z * u_xlat0.z;\n    u_xlat18 = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat18 = log2(u_xlat18);\n    u_xlat18 = u_xlat18 * _Reflectivity;\n    u_xlat18 = exp2(u_xlat18);\n    u_xlat7.xyz = vec3(u_xlat18) * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_2.www + u_xlat16_2.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat30 = (-_Ambient) + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat30 + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat9) + u_xlat3.xyz;\n    u_xlat10_27 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat27 = u_xlat10_27 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vec4(u_xlat27) * vs_COLOR1;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_4.xxx + u_xlat0.xyz;\n    u_xlat0.w = u_xlat1.w * u_xlat16_4.x + u_xlat16_2.w;\n    u_xlat3.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat3.xy = u_xlat3.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD2.zw;\n    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat3.y * u_xlat3.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_4.xxxx;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["GLOW_ON","UNDERLAY_ON","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nbool u_xlatb6;\nmediump float u_xlat16_7;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_7 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0) + vs_TEXCOORD1.z;\n    u_xlat16_13 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_7;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_7 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_7);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_13;\n    u_xlat6.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat6.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat6.xy);\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat0.y = _OutlineSoftness * _ScaleRatioA;\n    u_xlat0.xz = u_xlat0.xy * vs_TEXCOORD1.yy;\n    u_xlat16_1 = u_xlat0.y * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_7 = u_xlat0.z * 0.5 + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_7 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_6 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat2 = u_xlat6.xxxx * vs_COLOR1;\n    u_xlat1 = u_xlat2 * vec4(u_xlat16_1) + u_xlat16_3;\n    u_xlat6.x = _GlowOffset * _ScaleRatioB;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat0.x = (-u_xlat6.x) * 0.5 + u_xlat0.x;\n    u_xlatb6 = u_xlat0.x>=0.0;\n    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat12 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat6.x = u_xlat6.x * u_xlat12 + _GlowInner;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat12 = u_xlat6.x * 0.5 + 1.0;\n    u_xlat6.x = u_xlat6.x * 0.5;\n    u_xlat6.x = min(u_xlat6.x, 1.0);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat0.x = u_xlat0.x \/ u_xlat12;\n    u_xlat0.x = min(abs(u_xlat0.x), 1.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _GlowPower;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1.xyz = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0 = u_xlat1 * u_xlat16_4.xxxx;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","GLOW_ON","UNDERLAY_ON","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec4 u_xlat16_6;\nvec4 u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_12;\nfloat u_xlat16;\nlowp vec2 u_xlat10_17;\nbool u_xlatb17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat1.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 \/ u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_17.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat10_2 = texture2D(_FaceTex, u_xlat1.xy);\n    u_xlat16_4.xy = u_xlat10_17.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n    u_xlat24 = (-_BumpFace) + _BumpOutline;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat1.x = (-u_xlat10_1) + vs_TEXCOORD1.z;\n    u_xlat1.z = _OutlineWidth * _ScaleRatioA;\n    u_xlat9.xy = u_xlat1.xz * vs_TEXCOORD1.yy;\n    u_xlat25 = u_xlat9.y * 0.5 + u_xlat9.x;\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat24 = u_xlat25 * u_xlat24 + _BumpFace;\n    u_xlat0.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat24) + u_xlat0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat24 = u_xlat24 + u_xlat24;\n    u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat24) + vs_TEXCOORD3.xyz;\n    u_xlat10_3.xyz = textureCube(_Cube, u_xlat3.xyz).xyz;\n    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz + _ReflectFaceColor.xyz;\n    u_xlat3.xyz = u_xlat10_3.xyz * u_xlat5.xyz;\n    u_xlat16_4.x = min(u_xlat9.y, 1.0);\n    u_xlat16_12 = u_xlat9.y * 0.5;\n    u_xlat16_4.x = sqrt(u_xlat16_4.x);\n    u_xlat16_20 = u_xlat1.x * vs_TEXCOORD1.y + u_xlat16_12;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_12 = u_xlat1.x * vs_TEXCOORD1.y + (-u_xlat16_12);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_20;\n    u_xlat16_6.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat1.xzw = u_xlat10_2.xyz * u_xlat16_6.xyz;\n    u_xlat24 = u_xlat10_2.w * _FaceColor.w;\n    u_xlat16_6.xyz = vec3(u_xlat24) * u_xlat1.xzw;\n    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_5 = texture2D(_OutlineTex, u_xlat2.xy);\n    u_xlat7 = u_xlat10_5 * _OutlineColor;\n    u_xlat16_5.w = _OutlineColor.w * u_xlat10_5.w + (-u_xlat24);\n    u_xlat16_5.xyz = u_xlat7.xyz * u_xlat7.www + (-u_xlat16_6.xyz);\n    u_xlat16_5 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat24) + u_xlat16_5.xyz;\n    u_xlat16_6.w = _FaceColor.w * u_xlat10_2.w + u_xlat16_5.w;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat1.x = u_xlat24 * vs_TEXCOORD1.y;\n    u_xlat16_4.x = u_xlat24 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_12 = u_xlat1.x * 0.5 + u_xlat16_12;\n    u_xlat16_4.x = u_xlat16_12 \/ u_xlat16_4.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_6;\n    u_xlat16_4.x = (-u_xlat16_6.w) * u_xlat16_4.x + 1.0;\n    u_xlat1.xzw = u_xlat16_2.www * u_xlat3.xyz;\n    u_xlat3.x = sin(_LightAngle);\n    u_xlat7.x = cos(_LightAngle);\n    u_xlat3.y = u_xlat7.x;\n    u_xlat3.z = -1.0;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat8 = u_xlat0.z * u_xlat0.z;\n    u_xlat16 = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat16 = log2(u_xlat16);\n    u_xlat16 = u_xlat16 * _Reflectivity;\n    u_xlat16 = exp2(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * _SpecularColor.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_2.www + u_xlat16_2.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat3.x = (-_Ambient) + 1.0;\n    u_xlat8 = u_xlat8 * u_xlat3.x + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat1.xzw;\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat24 = u_xlat10_24 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat3 = vec4(u_xlat24) * vs_COLOR1;\n    u_xlat0.xyz = u_xlat3.xyz * u_xlat16_4.xxx + u_xlat0.xyz;\n    u_xlat2.w = u_xlat3.w * u_xlat16_4.x + u_xlat16_2.w;\n    u_xlat24 = _GlowOffset * _ScaleRatioB;\n    u_xlat24 = u_xlat24 * vs_TEXCOORD1.y;\n    u_xlat24 = (-u_xlat24) * 0.5 + u_xlat9.x;\n    u_xlatb1 = u_xlat24>=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat9.x = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat1.x = u_xlat1.x * u_xlat9.x + _GlowInner;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD1.y;\n    u_xlat9.x = u_xlat1.x * 0.5 + 1.0;\n    u_xlat1.x = u_xlat1.x * 0.5;\n    u_xlat1.x = min(u_xlat1.x, 1.0);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat24 = u_xlat24 \/ u_xlat9.x;\n    u_xlat24 = min(abs(u_xlat24), 1.0);\n    u_xlat24 = log2(u_xlat24);\n    u_xlat24 = u_xlat24 * _GlowPower;\n    u_xlat24 = exp2(u_xlat24);\n    u_xlat24 = (-u_xlat24) + 1.0;\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat24 = dot(_GlowColor.ww, vec2(u_xlat24));\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xyz = _GlowColor.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0 = u_xlat2 * u_xlat16_4.xxxx;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww \/ u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 \/ u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x \/ u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nlowp vec2 u_xlat10_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nvec2 u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nbool u_xlatb27;\nfloat u_xlat32;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_10 = u_xlat0.x * 0.5;\n    u_xlat10_9.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat9.x = (-u_xlat10_9.x) + vs_TEXCOORD1.z;\n    u_xlat16_19 = u_xlat9.x * vs_TEXCOORD1.y + u_xlat16_10;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = u_xlat9.x * vs_TEXCOORD1.y + (-u_xlat16_10);\n    u_xlat9.x = u_xlat9.x * vs_TEXCOORD1.y;\n    u_xlat0.x = u_xlat0.x * 0.5 + u_xlat9.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_19;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat9.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat9.xy);\n    u_xlat10_9.xy = texture2D(_BumpMap, u_xlat9.xy).yw;\n    u_xlat16_6.xy = u_xlat10_9.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat9.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat9.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat9.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat18.x = u_xlat9.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat9.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_10 = u_xlat18.x * 0.5 + u_xlat16_10;\n    u_xlat16_1 = u_xlat16_10 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_9.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat9.x = u_xlat10_9.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat2 = u_xlat9.xxxx * vs_COLOR1;\n    u_xlat4.w = u_xlat2.w * u_xlat16_1 + u_xlat16_3.w;\n    u_xlat9.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat9.xy = u_xlat9.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat9.xy = u_xlat9.xy * vs_TEXCOORD2.zw;\n    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);\n    u_xlat16_10 = u_xlat9.y * u_xlat9.x;\n    u_xlat16_19 = u_xlat4.w * u_xlat16_10 + -0.00100000005;\n    u_xlatb9 = u_xlat16_19<0.0;\n    if(u_xlatb9){discard;}\n    u_xlat9.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat5.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat5.z = 0.0;\n    u_xlat7 = (-u_xlat5.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat5 = u_xlat5.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_8.x = texture2D(_MainTex, u_xlat7.xy).w;\n    u_xlat10_8.z = texture2D(_MainTex, u_xlat7.zw).w;\n    u_xlat10_8.y = texture2D(_MainTex, u_xlat5.xy).w;\n    u_xlat10_8.w = texture2D(_MainTex, u_xlat5.zw).w;\n    u_xlat5 = u_xlat9.xxxx + u_xlat10_8;\n    u_xlat5 = u_xlat5 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat9.x = _BevelWidth + _OutlineWidth;\n    u_xlat9.x = max(u_xlat9.x, 0.00999999978);\n    u_xlat5 = u_xlat5 \/ u_xlat9.xxxx;\n    u_xlat9.x = u_xlat9.x * _Bevel;\n    u_xlat9.x = u_xlat9.x * _GradientScale;\n    u_xlat9.x = u_xlat9.x * -2.0;\n    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat7 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat7 = -abs(u_xlat7) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat18.x = _ShaderFlags * 0.5;\n    u_xlatb27 = u_xlat18.x>=(-u_xlat18.x);\n    u_xlat18.x = fract(abs(u_xlat18.x));\n    u_xlat18.x = (u_xlatb27) ? u_xlat18.x : (-u_xlat18.x);\n    u_xlatb18 = u_xlat18.x>=0.5;\n    u_xlat5 = (bool(u_xlatb18)) ? u_xlat7 : u_xlat5;\n    u_xlat7 = u_xlat5 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat7 = sin(u_xlat7);\n    u_xlat7 = (-u_xlat5) + u_xlat7;\n    u_xlat5 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat7 + u_xlat5;\n    u_xlat18.x = (-_BevelClamp) + 1.0;\n    u_xlat5 = min(u_xlat18.xxxx, u_xlat5);\n    u_xlat18.xy = u_xlat9.xx * u_xlat5.xz;\n    u_xlat5.yz = u_xlat5.wy * u_xlat9.xx + (-u_xlat18.yx);\n    u_xlat5.x = float(-1.0);\n    u_xlat5.w = float(1.0);\n    u_xlat9.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat18.x = dot(u_xlat5.zw, u_xlat5.zw);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat7.x = u_xlat18.x * u_xlat5.z;\n    u_xlat7.yz = u_xlat18.xx * vec2(1.0, 0.0);\n    u_xlat5.z = 0.0;\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat9.xyz * u_xlat7.xyz;\n    u_xlat9.xyz = u_xlat7.zxy * u_xlat9.yzx + (-u_xlat5.xyz);\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat0.x * u_xlat5.x + _BumpFace;\n    u_xlat16_19 = dot(u_xlat16_6.xy, u_xlat16_6.xy);\n    u_xlat16_19 = min(u_xlat16_19, 1.0);\n    u_xlat16_19 = (-u_xlat16_19) + 1.0;\n    u_xlat16_6.z = sqrt(u_xlat16_19);\n    u_xlat9.xyz = (-u_xlat16_6.xyz) * u_xlat5.xxx + u_xlat9.xyz;\n    u_xlat5.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat9.xyz = u_xlat9.xyz * u_xlat5.xxx;\n    u_xlat5.x = dot(vs_TEXCOORD3.xyz, (-u_xlat9.xyz));\n    u_xlat5.x = u_xlat5.x + u_xlat5.x;\n    u_xlat5.xyz = u_xlat9.xyz * u_xlat5.xxx + vs_TEXCOORD3.xyz;\n    u_xlat10_5.xyz = textureCube(_Cube, u_xlat5.xyz).xyz;\n    u_xlat7.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + _ReflectFaceColor.xyz;\n    u_xlat5.xyz = u_xlat10_5.xyz * u_xlat7.xyz;\n    u_xlat5.xyz = u_xlat16_3.www * u_xlat5.xyz;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat0.x = cos(_LightAngle);\n    u_xlat7.y = u_xlat0.x;\n    u_xlat7.z = -1.0;\n    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat7.xyz);\n    u_xlat9.x = u_xlat9.z * u_xlat9.z;\n    u_xlat18.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;\n    u_xlat18.x = log2(u_xlat18.x);\n    u_xlat18.x = u_xlat18.x * _Reflectivity;\n    u_xlat18.x = exp2(u_xlat18.x);\n    u_xlat7.xyz = u_xlat18.xxx * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_3.www + u_xlat16_3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat32 = (-_Ambient) + 1.0;\n    u_xlat9.x = u_xlat9.x * u_xlat32 + _Ambient;\n    u_xlat0.xyz = u_xlat0.xzw * u_xlat9.xxx + u_xlat5.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * vec3(u_xlat16_1) + u_xlat0.xyz;\n    u_xlat16_0 = vec4(u_xlat16_10) * u_xlat4;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["GLOW_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nbool u_xlatb6;\nmediump float u_xlat16_7;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_7 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0) + vs_TEXCOORD1.z;\n    u_xlat16_13 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_7;\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_7 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_7);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_13;\n    u_xlat6.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat6.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat6.xy);\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat2.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat6.xyz * u_xlat2.xxx;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat2.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat0.y = _OutlineSoftness * _ScaleRatioA;\n    u_xlat0.xz = u_xlat0.xy * vs_TEXCOORD1.yy;\n    u_xlat16_1 = u_xlat0.y * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_7 = u_xlat0.z * 0.5 + u_xlat16_7;\n    u_xlat16_1 = u_xlat16_7 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_6 = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat2 = u_xlat6.xxxx * vs_COLOR1;\n    u_xlat1 = u_xlat2 * vec4(u_xlat16_1) + u_xlat16_3;\n    u_xlat6.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xy = u_xlat6.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD2.zw;\n    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat6.y * u_xlat6.x;\n    u_xlat16_10 = u_xlat1.w * u_xlat16_4.x + -0.00100000005;\n    u_xlatb6 = u_xlat16_10<0.0;\n    if(u_xlatb6){discard;}\n    u_xlat6.x = _GlowOffset * _ScaleRatioB;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat0.x = (-u_xlat6.x) * 0.5 + u_xlat0.x;\n    u_xlatb6 = u_xlat0.x>=0.0;\n    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat12 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat6.x = u_xlat6.x * u_xlat12 + _GlowInner;\n    u_xlat6.x = u_xlat6.x * vs_TEXCOORD1.y;\n    u_xlat12 = u_xlat6.x * 0.5 + 1.0;\n    u_xlat6.x = u_xlat6.x * 0.5;\n    u_xlat6.x = min(u_xlat6.x, 1.0);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat0.x = u_xlat0.x \/ u_xlat12;\n    u_xlat0.x = min(abs(u_xlat0.x), 1.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _GlowPower;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = (-u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6.x * u_xlat0.x;\n    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1.xyz = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat16_0 = u_xlat1 * u_xlat16_4.xxxx;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0],[0,0,["BEVEL_ON","GLOW_ON","UNDERLAY_ON","UNITY_UI_ALPHACLIP","UNITY_UI_CLIP_RECT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nvec3 u_xlat7;\nvec2 u_xlat10;\nfloat u_xlat15;\nfloat u_xlat16;\nbool u_xlatb16;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat10.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat10.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat10.x;\n    u_xlat15 = (-_GlowOffset) * _ScaleRatioB + 1.0;\n    u_xlat15 = (-_GlowOuter) * _ScaleRatioB + u_xlat15;\n    u_xlat10.x = min(u_xlat15, u_xlat10.x);\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = abs(u_xlat2.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = u_xlat2.ww \/ u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat2.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) \/ u_xlat2.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat16 = u_xlat16 * u_xlat2.x;\n    u_xlat2.x = u_xlat15 * u_xlat16;\n    u_xlat7.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat7.x = u_xlat7.x * abs(u_xlat2.x);\n    u_xlat15 = u_xlat15 * u_xlat16 + (-u_xlat7.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat15 = abs(u_xlat16) * u_xlat15 + u_xlat7.x;\n    u_xlatb16 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat7.x = (u_xlatb16) ? u_xlat15 : u_xlat2.x;\n    u_xlat15 = 0.5 \/ u_xlat7.x;\n    u_xlat10.x = u_xlat10.x * 0.5 + (-u_xlat15);\n    u_xlatb16 = 0.0>=in_TEXCOORD1.y;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat16 = u_xlat16 * u_xlat2.x + _WeightNormal;\n    u_xlat16 = u_xlat16 * 0.25 + _FaceDilate;\n    u_xlat16 = u_xlat16 * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat16) * 0.5 + u_xlat10.x;\n    u_xlat7.z = u_xlat16 * 0.5;\n    u_xlat10.x = (-u_xlat16) * 0.5 + 0.5;\n    vs_TEXCOORD1.yw = u_xlat7.xz;\n    vs_TEXCOORD1.z = u_xlat15 + u_xlat10.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat7.x + 1.0;\n    u_xlat0.x = u_xlat7.x \/ u_xlat0.x;\n    u_xlat5 = u_xlat10.x * u_xlat0.x + -0.5;\n    u_xlat10.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy \/ vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat10.x) * 0.5 + u_xlat5;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat10.x = floor(u_xlat0.x);\n    u_xlat10.y = (-u_xlat10.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat10.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tmediump vec4 _SpecularColor;\nuniform \tfloat _LightAngle;\nuniform \tfloat _SpecularPower;\nuniform \tfloat _Reflectivity;\nuniform \tfloat _Diffuse;\nuniform \tfloat _Ambient;\nuniform \tmediump vec4 _GlowColor;\nuniform \tfloat _GlowOffset;\nuniform \tfloat _GlowOuter;\nuniform \tfloat _GlowInner;\nuniform \tfloat _GlowPower;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioB;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nvec4 u_xlat7;\nlowp vec3 u_xlat10_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nlowp float u_xlat10_9;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nvec2 u_xlat18;\nlowp vec2 u_xlat10_18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nfloat u_xlat23;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat32;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_10 = u_xlat0.x * 0.5;\n    u_xlat10_9 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat9 = (-u_xlat10_9) + vs_TEXCOORD1.z;\n    u_xlat16_19 = u_xlat9 * vs_TEXCOORD1.y + u_xlat16_10;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = u_xlat9 * vs_TEXCOORD1.y + (-u_xlat16_10);\n    u_xlat9 = u_xlat9 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_19;\n    u_xlat18.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat18.xy);\n    u_xlat3 = u_xlat10_2 * _OutlineColor;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat18.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_5 = texture2D(_FaceTex, u_xlat18.xy);\n    u_xlat10_18.xy = texture2D(_BumpMap, u_xlat18.xy).yw;\n    u_xlat16_6.xy = u_xlat10_18.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz * u_xlat10_5.xyz;\n    u_xlat18.x = u_xlat10_5.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat18.xxx * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_4.xyz);\n    u_xlat16_3.w = _OutlineColor.w * u_xlat10_2.w + (-u_xlat18.x);\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_3;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat18.xxx + u_xlat16_3.xyz;\n    u_xlat16_2.w = _FaceColor.w * u_xlat10_5.w + u_xlat16_3.w;\n    u_xlat18.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat27 = u_xlat18.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat18.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_10 = u_xlat27 * 0.5 + u_xlat16_10;\n    u_xlat16_1 = u_xlat16_10 \/ u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_3 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_1 = (-u_xlat16_2.w) * u_xlat16_1 + 1.0;\n    u_xlat10_18.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat18.x = u_xlat10_18.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);\n    u_xlat2 = u_xlat18.xxxx * vs_COLOR1;\n    u_xlat4.w = u_xlat2.w * u_xlat16_1 + u_xlat16_3.w;\n    u_xlat18.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat18.xy = u_xlat18.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat18.xy = u_xlat18.xy * vs_TEXCOORD2.zw;\n    u_xlat18.xy = clamp(u_xlat18.xy, 0.0, 1.0);\n    u_xlat16_10 = u_xlat18.y * u_xlat18.x;\n    u_xlat16_19 = u_xlat4.w * u_xlat16_10 + -0.00100000005;\n    u_xlatb18 = u_xlat16_19<0.0;\n    if(u_xlatb18){discard;}\n    u_xlat18.x = vs_TEXCOORD1.w + _BevelOffset;\n    u_xlat5.xy = vec2(0.5, 0.5) \/ vec2(_TextureWidth, _TextureHeight);\n    u_xlat5.z = 0.0;\n    u_xlat7 = (-u_xlat5.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat5 = u_xlat5.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_8.x = texture2D(_MainTex, u_xlat7.xy).w;\n    u_xlat10_8.z = texture2D(_MainTex, u_xlat7.zw).w;\n    u_xlat10_8.y = texture2D(_MainTex, u_xlat5.xy).w;\n    u_xlat10_8.w = texture2D(_MainTex, u_xlat5.zw).w;\n    u_xlat5 = u_xlat18.xxxx + u_xlat10_8;\n    u_xlat5 = u_xlat5 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat18.x = _BevelWidth + _OutlineWidth;\n    u_xlat18.x = max(u_xlat18.x, 0.00999999978);\n    u_xlat5 = u_xlat5 \/ u_xlat18.xxxx;\n    u_xlat18.x = u_xlat18.x * _Bevel;\n    u_xlat18.x = u_xlat18.x * _GradientScale;\n    u_xlat18.x = u_xlat18.x * -2.0;\n    u_xlat5 = u_xlat5 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat7 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat7 = -abs(u_xlat7) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat27 = _ShaderFlags * 0.5;\n    u_xlatb8 = u_xlat27>=(-u_xlat27);\n    u_xlat27 = fract(abs(u_xlat27));\n    u_xlat27 = (u_xlatb8) ? u_xlat27 : (-u_xlat27);\n    u_xlatb27 = u_xlat27>=0.5;\n    u_xlat5 = (bool(u_xlatb27)) ? u_xlat7 : u_xlat5;\n    u_xlat7 = u_xlat5 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat7 = sin(u_xlat7);\n    u_xlat7 = (-u_xlat5) + u_xlat7;\n    u_xlat5 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat7 + u_xlat5;\n    u_xlat27 = (-_BevelClamp) + 1.0;\n    u_xlat5 = min(vec4(u_xlat27), u_xlat5);\n    u_xlat5.xz = u_xlat18.xx * u_xlat5.xz;\n    u_xlat5.yz = u_xlat5.wy * u_xlat18.xx + (-u_xlat5.zx);\n    u_xlat5.x = float(-1.0);\n    u_xlat5.w = float(1.0);\n    u_xlat18.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat27 = dot(u_xlat5.zw, u_xlat5.zw);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.x = u_xlat27 * u_xlat5.z;\n    u_xlat7.yz = vec2(u_xlat27) * vec2(1.0, 0.0);\n    u_xlat5.z = 0.0;\n    u_xlat5.xyz = u_xlat18.xxx * u_xlat5.xyz;\n    u_xlat8.xyz = u_xlat5.xyz * u_xlat7.xyz;\n    u_xlat5.xyz = u_xlat7.zxy * u_xlat5.yzx + (-u_xlat8.xyz);\n    u_xlat0.x = u_xlat0.x * 0.5 + u_xlat9;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat18.x = (-_BumpFace) + _BumpOutline;\n    u_xlat18.x = u_xlat0.x * u_xlat18.x + _BumpFace;\n    u_xlat16_19 = dot(u_xlat16_6.xy, u_xlat16_6.xy);\n    u_xlat16_19 = min(u_xlat16_19, 1.0);\n    u_xlat16_19 = (-u_xlat16_19) + 1.0;\n    u_xlat16_6.z = sqrt(u_xlat16_19);\n    u_xlat5.xyz = (-u_xlat16_6.xyz) * u_xlat18.xxx + u_xlat5.xyz;\n    u_xlat18.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n    u_xlat5.xyz = u_xlat18.xxx * u_xlat5.xyz;\n    u_xlat18.x = dot(vs_TEXCOORD3.xyz, (-u_xlat5.xyz));\n    u_xlat18.x = u_xlat18.x + u_xlat18.x;\n    u_xlat7.xyz = u_xlat5.xyz * u_xlat18.xxx + vs_TEXCOORD3.xyz;\n    u_xlat10_7.xyz = textureCube(_Cube, u_xlat7.xyz).xyz;\n    u_xlat8.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat8.xyz + _ReflectFaceColor.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat10_7.xyz;\n    u_xlat0.xzw = u_xlat16_3.www * u_xlat0.xzw;\n    u_xlat7.x = sin(_LightAngle);\n    u_xlat8.x = cos(_LightAngle);\n    u_xlat7.y = u_xlat8.x;\n    u_xlat7.z = -1.0;\n    u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat32 = inversesqrt(u_xlat32);\n    u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat7.xyz);\n    u_xlat14 = u_xlat5.z * u_xlat5.z;\n    u_xlat23 = max(u_xlat5.x, 0.0);\n    u_xlat5.x = (-u_xlat5.x) * _Diffuse + 1.0;\n    u_xlat23 = log2(u_xlat23);\n    u_xlat23 = u_xlat23 * _Reflectivity;\n    u_xlat23 = exp2(u_xlat23);\n    u_xlat7.xyz = vec3(u_xlat23) * _SpecularColor.xyz;\n    u_xlat7.xyz = u_xlat7.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));\n    u_xlat7.xyz = u_xlat7.xyz * u_xlat16_3.www + u_xlat16_3.xyz;\n    u_xlat5.xzw = u_xlat5.xxx * u_xlat7.xyz;\n    u_xlat7.x = (-_Ambient) + 1.0;\n    u_xlat14 = u_xlat14 * u_xlat7.x + _Ambient;\n    u_xlat0.xzw = u_xlat5.xzw * vec3(u_xlat14) + u_xlat0.xzw;\n    u_xlat0.xzw = u_xlat2.xyz * vec3(u_xlat16_1) + u_xlat0.xzw;\n    u_xlat5.x = _GlowOffset * _ScaleRatioB;\n    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y;\n    u_xlat9 = (-u_xlat5.x) * 0.5 + u_xlat9;\n    u_xlatb5 = u_xlat9>=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat14 = _GlowOuter * _ScaleRatioB + (-_GlowInner);\n    u_xlat5.x = u_xlat5.x * u_xlat14 + _GlowInner;\n    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y;\n    u_xlat14 = u_xlat5.x * 0.5 + 1.0;\n    u_xlat5.x = u_xlat5.x * 0.5;\n    u_xlat5.x = min(u_xlat5.x, 1.0);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat9 = u_xlat9 \/ u_xlat14;\n    u_xlat9 = min(abs(u_xlat9), 1.0);\n    u_xlat9 = log2(u_xlat9);\n    u_xlat9 = u_xlat9 * _GlowPower;\n    u_xlat9 = exp2(u_xlat9);\n    u_xlat9 = (-u_xlat9) + 1.0;\n    u_xlat9 = u_xlat5.x * u_xlat9;\n    u_xlat9 = dot(_GlowColor.ww, vec2(u_xlat9));\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat4.xyz = _GlowColor.xyz * vec3(u_xlat9) + u_xlat0.xzw;\n    u_xlat16_0 = vec4(u_xlat16_10) * u_xlat4;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n",0]],[],0]],[],[["_FaceTex",4,0,0,0,0,"white"],["_FaceUVSpeedX",3,0,-5,5,0,""],["_FaceUVSpeedY",3,0,-5,5,0,""],["_FaceColor",0,1,1,1,1,""],["_FaceDilate",3,0,-1,1,0,""],["_OutlineColor",0,0,0,0,1,""],["_OutlineTex",4,0,0,0,0,"white"],["_OutlineUVSpeedX",3,0,-5,5,0,""],["_OutlineUVSpeedY",3,0,-5,5,0,""],["_OutlineWidth",3,0,0,1,0,""],["_OutlineSoftness",3,0,0,1,0,""],["_Bevel",3,0.5,0,1,0,""],["_BevelOffset",3,0,-0.5,0.5,0,""],["_BevelWidth",3,0,-0.5,0.5,0,""],["_BevelClamp",3,0,0,1,0,""],["_BevelRoundness",3,0,0,1,0,""],["_LightAngle",3,3.14159989356995,0,6.28318548202515,0,""],["_SpecularColor",0,1,1,1,1,""],["_SpecularPower",3,2,0,4,0,""],["_Reflectivity",3,10,5,15,0,""],["_Diffuse",3,0.5,0,1,0,""],["_Ambient",3,0.5,1,0,0,""],["_BumpMap",4,0,0,0,0,"bump"],["_BumpOutline",3,0,0,1,0,""],["_BumpFace",3,0,0,1,0,""],["_ReflectFaceColor",0,0,0,0,1,""],["_ReflectOutlineColor",0,0,0,0,1,""],["_Cube",4,0,0,0,0,"black"],["_EnvMatrixRotation",1,0,0,0,0,""],["_UnderlayColor",0,0,0,0,0.5,""],["_UnderlayOffsetX",3,0,-1,1,0,""],["_UnderlayOffsetY",3,0,-1,1,0,""],["_UnderlayDilate",3,0,-1,1,0,""],["_UnderlaySoftness",3,0,0,1,0,""],["_GlowColor",0,0,1,0,0.5,""],["_GlowOffset",3,0,-1,1,0,""],["_GlowInner",3,0.0500000007450581,0,1,0,""],["_GlowOuter",3,0.0500000007450581,0,1,0,""],["_GlowPower",3,0.75,1,0,0,""],["_WeightNormal",2,0,0,0,0,""],["_WeightBold",2,0.5,0,0,0,""],["_ShaderFlags",2,0,0,0,0,""],["_ScaleRatioA",2,1,0,0,0,""],["_ScaleRatioB",2,1,0,0,0,""],["_ScaleRatioC",2,1,0,0,0,""],["_MainTex",4,0,0,0,0,"white"],["_TextureWidth",2,512,0,0,0,""],["_TextureHeight",2,512,0,0,0,""],["_GradientScale",2,5,0,0,0,""],["_ScaleX",2,1,0,0,0,""],["_ScaleY",2,1,0,0,0,""],["_PerspectiveFilter",3,0.875,0,1,0,""],["_Sharpness",3,0,-1,1,0,""],["_VertexOffsetX",2,0,0,0,0,""],["_VertexOffsetY",2,0,0,0,0,""],["_MaskCoord",1,0,0,32767,32767,""],["_ClipRect",1,-32767,-32767,32767,32767,""],["_MaskSoftnessX",2,0,0,0,0,""],["_MaskSoftnessY",2,0,0,0,0,""],["_StencilComp",2,8,0,0,0,""],["_Stencil",2,0,0,0,0,""],["_StencilOp",2,0,0,0,0,""],["_StencilWriteMask",2,255,0,0,0,""],["_StencilReadMask",2,255,0,0,0,""],["_CullMode",2,0,0,0,0,""],["_ColorMask",2,15,0,0,0,""]],0,426,0,0,0]}